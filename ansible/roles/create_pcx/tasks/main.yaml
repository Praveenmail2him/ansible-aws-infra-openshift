---

# Create a new VPC Peer Connection

# Input variables:
# pcxName
# vpc1Name
# vpc2Name

# Return values
#
# peering_id

- set_fact:
    pcxs: []
    
- name: Query for VPC Peer Existence
  community.aws.ec2_vpc_peering_info:
    region: "{{awsRegion}}"
  register: response

- name: Filter response for VPC Peer Connections with Name tags
  set_fact:
    pcxs: "{{ pcxs | default([]) + [item]}}"
  loop: "{{response.vpc_peering_connections}}"
  loop_control:
    label: "{{item.vpc_peering_connection_id}}"
  when: item.tags.Name is defined

- name: Query response for existing VPC Peer connection 
  set_fact:
    pcxId: "{{ pcxs | json_query(query) }}"
  vars:
    query: "[?tags.Name == '{{pcxName}}'].vpc_peering_connection_id"

- name: Set exists to true if existing peering connection found
  set_fact:
    pcxExists: "{{true if(pcxId | length == 1) else false}}"

- name: Query response for existing peering connection status
  set_fact:
    pcxStatus: "{{ pcxs | json_query(query) }}"
  vars:
    query: "[?tags.Name == '{{pcxName}}'].status.code"
  when: pcxExists

- name: Get VPC Details if Peer Connection does not exist
  amazon.aws.ec2_vpc_net_info:
    profile: "{{awsProfile|default(omit)}}"
    region: "{{awsRegion|default(omit)}}"
    filters:
      "tag:Resource": "{{resourceGroup|lower}}"
  register: response
  failed_when: response.failed
  when: not pcxExists

- name: Query response for first VPC id
  set_fact:
    vpc1_id: "{{ response.vpcs | json_query(query1)}}"
    vpc2_id: "{{ response.vpcs | json_query(query2)}}"
  vars:
    query1: "[?contains(tags.Name,'{{vpc1Name}}')].vpc_id"
    query2: "[?contains(tags.Name,'{{vpc2Name}}')].vpc_id"
  when: not pcxExists
  failed_when: (vpc1_id | length != 1) or (vpc2_id | length != 1)

- name: Create VPC peer between VPC1 and VPC2
  community.aws.ec2_vpc_peer:
    region: "{{awsRegion}}"
    profile: "{{awsProfile}}"
    vpc_id: "{{vpc1_id[0]}}"
    peer_vpc_id: "{{vpc2_id[0]}}"
    state: present
    tags:
      Name: "{{pcxName}}"
      Resource: "{{envName}}"
  register: response
  failed_when: >
    (response.failed) or 
    (response.peering_id|length == 0)
  when: not pcxExists

- name: Set peering id for acceptance
  set_fact:
    peering_id: "{{pcxId[0] if(pcxExists) else response.peering_id}}"

- name: Query for VPC Peer Connection Status
  community.aws.ec2_vpc_peering_info:
    peer_connection_ids:
      - "{{peering_id}}"
  register: response
  failed_when: >
    (response.failed) or 
    (response.vpc_peering_connections|length > 1)

- set_fact:
    pcxStatus: "{{response.vpc_peering_connections[0].status.code}}"

- name: Accept VPC Peering connection
  community.aws.ec2_vpc_peer:
    region: "{{awsRegion}}"
    profile: "{{awsProfile}}"
    peering_id: "{{peering_id}}"
    state: accept
  register: response
  failed_when: >
    (response.failed)
  when: pcxStatus == 'pending-acceptance'