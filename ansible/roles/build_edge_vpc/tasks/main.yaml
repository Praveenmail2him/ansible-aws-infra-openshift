---
####
# Determine the CIDR for each of the subnets based upon the VPC CIDR
- name: Calculate required subnet CIDR blocks
  import_role: 
    name: calc_subnets
  vars:
    vpc_cidr: "{{edge_cidr}}"
    noAvailZones: "{{availZones | length}}"
    availZonePrefix: "{{edgeTierPrefix}}"
    subnetPrefix: "{{edgeSubnetPrefix}}"

###
# Create the VPC if it does not already exist
- name: Check if VPC already exists
  amazon.aws.ec2_vpc_net_info:
    profile: "{{awsProfile}}"
    region: "{{awsRegion}}"
    filters:
      "tag:Name": "{{envNamePrefix}}-{{edge}}-vpc"
  register: returnedInfo

- name: Set exists if VPC found
  set_fact:
    vpcExists: True
  when: returnedInfo.vpcs|length > 0

- name: Set exists false if VPC not found
  set_fact:
    vpcExists: False
  when: returnedInfo.vpcs|length == 0

- name: Fail build if more than one VPC returned
  fail:
    msg: [
      "ERROR: Found more than one existing VPC with name {{envNamePrefix}}-{{edge}}-vpc",
      "Please correct and retry"
    ]
  when: returnedInfo.vpcs|length > 1

- name: Set Edge VPC info to that already created
  set_fact:
    edgeVpc: "{{returnedInfo.vpcs[0]}}"
  when: vpcExists

- name: Create edge VPC
  import_role:
    name: create_vpc
  vars:
    # These variable are defined in the global_vars file
    envName: "{{envNamePrefix}}"
    vpcName: "{{edge}}"
    usrProfile: "{{awsProfile}}"
    reqRegion: "{{awsRegion}}"
    # The cidr_block is obtained from the earlier subnet calcs
    cidr_block: "{{aclSubnets}}"
  when: not vpcExists

- name: Set facts of created VPC
  set_fact:
    edgeVpc: "{{vpcData.vpc}}"
  when: not vpcExists

- name: Display VPC id
  debug:
    msg: "Edge VPC is {{edgeVpc.id}} for {{envNamePrefix}}-{{edge}}-vpc"

###
# Create the subnets

##
# Ingress subnets

# Create a dictionary of subnets to create
- name: Create dictionary of ingress subnets to be created
  set_fact:
    subnetData: "{{ subnetData | default([]) + [{ 'Name': edge+'-ingress'+loop_index|string, 'CIDR': item, 'AZ': availZones[loop_index], 'Exists': False }] }}"
  loop: "{{ingressSubnets}}"
  loop_control:
    index_var: loop_index

- name: Check if ingress subnets already exist
  amazon.aws.ec2_vpc_subnet_info:
    filters: 
      vpc-id: "{{edgeVpc.id}}"
      "tag:Name": "{{item.Name}}"
  loop: "{{ subnetData }}"
  register: subnet_info

################## DEBUG (TO BE REMOVED)
- name: Display returned info
  debug:
    msg: [
      "Returned info from query is {{subnet_info.results}}"
    ]

# Go through returned values to determine which already exist and then modify flag in dict to reflect

# Create Missing Subnets

# Create route tables

# Associate route tables with subnets