---

- name: Clear variables
  set_fact:
    response: []
    rosa: []
    response_default: []
    response_nondefault: []

- name: Query for ROSA CLI access (default region)
  shell: |
    set timeout 300

    {{rosa_path}}rosa whoami \
    --profile {{profile}}

    exit 0
  args:
    executable: /bin/bash
  delegate_to: localhost
  register: response_default
  when: region is not defined

- name: Query for ROSA CLI access (non-default region)
  shell: |
    set timeout 300

    {{rosa_path}}rosa whoami \
    --profile {{profile}} \
    --region {{region}}

    exit 0
  args:
    executable: /bin/bash
  delegate_to: localhost
  register: response_nondefault
  when: region is defined

- name: Set response to region if provided
  set_fact:
    response: "{{response_nondefault}}"
  when: region is defined

- name: Set response to default if region not provided
  set_fact:
    response: "{{response_default}}"
  when: region is not defined

- name: Fail if command was unsuccessful
  fail:
    msg: "Unable to run rosa CLI. Please correct and try again."
  when: response.rc != 0

- name: Parse correct access response
  set_fact:
    rosa: "{{rosa | default() | combine({'Access':True})}}"
  when: ("AWS Account ID" in response.stdout) and ("OCM Account ID" in response.stdout)

- name: Parse incorrect access response
  set_fact:
    rosa: "{{rosa | default() | combine({'Access':False})}}"
  when: ("AWS Account ID" not in response.stdout) or ("OCM Account ID" not in response.stdout)


# The following code needs to be modified. 
# The rosa verify quota command does not output to stdout. Plus need to include verification of permissions

#- name: Clear variables
#  set_fact:
#    response_default: []
#    response_nondefault: []
#    response: []

#- name: Query for ROSA quota (region not provided)
#  shell: |
#    set timeout 300
#
#    {{rosa_path}}rosa verify quota \
#    --profile {{profile}}
#
#    exit 0
#  args:
#    executable: /bin/bash
#  delegate_to: localhost
#  register: response_default
#  when: region is not defined

#- name: Query for ROSA quota (region provided)
#  shell: |
#    set timeout 300
#
#    {{rosa_path}}rosa verify quota \
#    --profile {{profile}} \
#    --region {{region}} > /tmp/verify_output
#
#    exit 0
#  args:
#    executable: /bin/bash
#  delegate_to: localhost
#  register: response_nondefault
#  when: region is defined

#- name: Set response to region if provided
#  set_fact:
#    response: "{{response_nondefault}}"
#  when: region is defined

#- name: Set response to default if region not provided
#  set_fact:
#    response: "{{response_default}}"
#  when: region is not defined

#- name: Parse for quota okay
#  set_fact:
#    rosa: "{{rosa | default() | combine({'Quota':True})}}"
#  when: '"AWS quota ok" in response.stdout'

#- name: Parse for quota not okay
#  set_fact:
#    rosa: "{{rosa | default() | combine({'Quota':False})}}"
#  when: '"AWS quota ok" not in response.stdout'

- name: Exit if ROSA Access not configured
  fail:
    msg: [
      "Unable to proceed. Please configure ROSA CLI access and try again."
    ]
  when: not rosa.Access

#- name: Exit if ROSA Quota not satisfactory
#  fail:
#    msg: [
#      "Unable to proceed. Please ensure ROSA quota is available and try again."
#    ]