---

- name: Create IBM reference architecture on AWS
  hosts: localhost


  vars:
    awsProfile: default
    awsRegion: ap-southeast-2
    availZones:    # Add availability zones as required (must all be part of the above region)
    - 'ap-southeast-2a'
    - 'ap-southeast-2b'
    - 'ap-southeast-2c'
    resourceGroup: 'adcloud'  
    edge_name: 'edge'     # This forms the name of the VPC and other components - refer reference architecture
    wkld_name: 'wkld'     # This forms the name of the VPC and other components - refer reference architecture
    mgmt_name: 'mgmt'     # This forms the name of the VPC and other components - refer reference architecture
    edge_cidr: 10.0.0.0/16
    mgmt_cidr: 10.1.0.0/16
    wkld_cidr: 10.2.0.0/16
    tierPrefix: 18       # This will be used to break the VPC CIDR up into subnets (public/private)
    subnetPrefix: 24     # This is the prefix for the individual subnets within each tier
    openshift_version: 4.9.23

  tasks:

    - name: Get the current time
      command: date
      register: dateResponse

    - name: Record current date
      set_fact:
        start_time: '{{dateResponse.stdout_lines[0]}}'

    - name: Check if inventory file exists
      stat:
        path: ./inventory.yaml
      register: inv_file

    - name: Read inventory template
      include_vars:
        file: '{{"./inventory.yaml" if(inv_file.stat.exists) else "./templates/advd-inventory.yaml"}}'

    - name: Fail if existing inventory is not for production architecture
      fail: 
        msg: "ERROR: Existing inventory is not for advanced architecture"
      when: (arch_type != 'Advanced')

    - name: Add profile to inventory
      set_fact:
        inventory: "{{inventory | combine({'profile':profile}, recursive=True)}}"
      vars:
        profile: "{{awsProfile if(awsProfile is defined) else 'default'}}"
      when: inventory.profile is not defined

    - name: Add region to inventory
      set_fact:
        inventory: "{{inventory | combine({'region':region}, recursive=True)}}"
      vars: 
        region: "{{awsRegion if(awsRegion is defined) else 'ap-southeast-2'}}"
      when: inventory.region is not defined

    - name: Add resource to inventory
      set_fact:
        inventory: "{{inventory | combine({'resource':prefix}, recursive=True)}}"
      vars: 
        prefix: "{{resourceGroup|lower if(resourceGroup is defined) else 'mycloud'}}"
      when: inventory.resource is not defined

    - name: Add availability zones to inventory
      set_fact:
        inventory: "{{inventory | combine({'availability_zones':zones}, recursive=True)}}"
      vars: 
        zones: "{{availZones if(availZones is defined) else inventory.region+'a'}}"
      when: inventory.avialability_zones is not defined

    - name: Add edge CIDR to inventory
      set_fact:
        inventory: "{{inventory | combine({'edge':{'cidrs':{'vpc':cidr}}}, recursive=True)}}"
      vars: 
        cidr: "{{edge_cidr if(edge_cidr is defined) else '10.0.0.0/16'}}"
      when: >
        (inventory.edge.cidrs.vpc is not defined) and
        (inventory.edge is defined)

    - name: Add management CIDR to inventory
      set_fact:
        inventory: "{{inventory | combine({'mgmt':{'cidrs':{'vpc':cidr}}}, recursive=True)}}"
      vars: 
        cidr: "{{mgmt_cidr if(mgmt_cidr is defined) else '10.1.0.0/16'}}"
      when: >
        (inventory.mgmt.cidrs.vpc is not defined) and
        (inventory.mgmt is defined)

    - name: Add workload CIDR to inventory
      set_fact:
        inventory: "{{inventory | combine({'wkld':{'cidrs':{'vpc':cidr}}}, recursive=True)}}"
      vars: 
        cidr: "{{wkld_cidr if(wkld_cidr is defined) else '10.2.0.0/16'}}"
      when: >
        (inventory.wkld.cidrs.vpc is not defined) and
        (inventory.wkld is defined)

    - name: Add edge identifier to inventory
      set_fact:
        inventory: "{{inventory | combine({'edge':{'identifier':name}}, recursive=True)}}"
      vars:
        name: "{{edge_name|lower if(edge_name is defined) else 'edge'}}"
      when: >
        (inventory.edge.identifier is not defined) and
        (inventory.edge is defined)

    - name: Add management identifier to inventory
      set_fact:
        inventory: "{{inventory | combine({'mgmt':{'identifier':name}}, recursive=True)}}"
      vars:
        name: "{{mgmt_name|lower if(mgmt_name is defined) else 'mgmt'}}"
      when: >
        (inventory.mgmt.identifier is not defined) and
        (inventory.mgmt is defined)

    - name: Add workload identifier to inventory
      set_fact:
        inventory: "{{inventory | combine({'wkld':{'identifier':name}}, recursive=True)}}"
      vars:
        name: "{{wkld_name|lower if(wkld_name is defined) else 'wkld'}}"
      when: >
        (inventory.wkld.identifier is not defined) and
        (inventory.wkld is defined)

    - include_role:
        name: validate_prereq
      when: (inventory.mgmt.rosa is defined) or (inventory.wkld.rosa is defined)

    - include_role:
        name: edge_vpc
      when: (inventory.edge is defined)

    - include_role:
        name: mgmt_vpc
      when: (inventory.mgmt is defined)

    - include_role:
        name: wkld_vpc
      when: (inventory.wkld is defined)

    - include_role:
        name: vpc_networking
      when: (inventory.tgw is defined)

    - name: Create the management ROSA cluster
      include_role:
        name: rosa_create_cluster
      vars:
        cluster_name: "{{inventory.resource}}-{{inventory.mgmt.identifier}}"
        machine_cidr: "{{inventory.mgmt.vpc.cidr}}"
        subnets: "{{inventory | json_query('mgmt.subnets[*].id')}}"
        region: "{{inventory.region}}"
        profile: "{{inventory.profile}}"
        version: "{{openshift_version}}"
        wait_for_completion: false
        new_vpc: False
        privatelink: True
      when: (inventory.mgmt.rosa is defined) and (inventory.mgmt.rosa | length == 0)

    - name: Create the workload ROSA cluster
      include_role:
        name: rosa_create_cluster
      vars:
        cluster_name: "{{inventory.resource}}-{{inventory.wkld.identifier}}"
        machine_cidr: "{{inventory.wkld.vpc.cidr}}"
        subnets: "{{inventory | json_query('wkld.subnets[*].id')}}"
        region: "{{inventory.region}}"
        profile: "{{inventory.profile}}"
        version: "{{openshift_version}}"
        wait_for_completion: false
        new_vpc: False
        privatelink: True
      when: (inventory.wkld.rosa is defined) and (inventory.wkld.rosa | length == 0)

    - name: Wait for management ROSA cluster to be ready (can take up to 60 minutes)
      shell: |
        {{rosa_path}}rosa describe cluster --cluster {{inventory.resource}}-{{inventory.mgmt.identifier}} | grep State
      args:
        executable: /bin/bash
      register: response
      until: '"ready" in response.stdout'
      retries: 30
      delay: 120
      when: (inventory.mgmt.rosa is defined) and (inventory.mgmt.rosa | length == 0)

    - name: Get management ROSA Cluster details
      shell: |
        {{rosa_path}}rosa describe cluster --cluster {{inventory.resource}}-{{inventory.mgmt.identifier}} | tr -s " " | grep ": " | sed 's/\"//g' | sed 's/ /_/g'
      args:
        executable: /bin/bash
      register: clusterResponse
      failed_when: clusterResponse.stderr | length > 0
      when: (inventory.mgmt.rosa is defined) and (inventory.mgmt.rosa | length == 0)

    - name: Convert management cluster details to facts
      set_fact:
        rosaDict: "{{ rosaDict | default({}) | combine( { item.split(':_')[0] | trim : item.split(':_')[1] | trim } )}}"
      loop: "{{clusterResponse.stdout_lines}}"
      when: (inventory.mgmt.rosa is defined) and (inventory.mgmt.rosa | length == 0)

    - name: Update inventory with management ROSA Cluster details
      set_fact:
        inventory: "{{inventory | combine({'mgmt':{'rosa':rosaDetails}}, recursive=True)}}"
      vars:
        rosaDetails:
          name: "{{rosaDict.Name}}"
          id: "{{rosaDict.ID}}"
          console: "{{rosaDict.Console_URL}}"
          dns: "{{rosaDict.DNS}}"
          state: "{{rosaDict.State | regex_replace('_','')}}"
      when: (inventory.mgmt.rosa is defined) and (inventory.mgmt.rosa | length == 0)

    - name: Wait for workload ROSA cluster to be ready (can take up to 60 minutes)
      shell: |
        {{rosa_path}}rosa describe cluster --cluster {{inventory.resource}}-{{inventory.wkld.identifier}} | grep State
      args:
        executable: /bin/bash
      register: response
      until: '"ready" in response.stdout'
      retries: 30
      delay: 120
      when: (inventory.wkld.rosa is defined) and (inventory.wkld.rosa | length == 0)

    - name: Get workload ROSA Cluster details
      shell: |
        {{rosa_path}}rosa describe cluster --cluster {{inventory.resource}}-{{inventory.wkld.identifier}} | tr -s " " | grep ": " | sed 's/\"//g' | sed 's/ /_/g'
      args:
        executable: /bin/bash
      register: clusterResponse
      failed_when: clusterResponse.stderr | length > 0
      when: (inventory.wkld.rosa is defined) and (inventory.wkld.rosa | length == 0)

    - name: Convert workload cluster details to facts
      set_fact:
        rosaDict: "{{ rosaDict | default({}) | combine( { item.split(':_')[0] | trim : item.split(':_')[1] | trim } )}}"
      loop: "{{clusterResponse.stdout_lines}}"
      when: (inventory.wkld.rosa is defined) and (inventory.wkld.rosa | length == 0)

    - name: Update inventory with workload ROSA Cluster details
      set_fact:
        inventory: "{{inventory | combine({'wkld':{'rosa':rosaDetails}}, recursive=True)}}"
      vars:
        rosaDetails:
          name: "{{rosaDict.Name}}"
          id: "{{rosaDict.ID}}"
          console: "{{rosaDict.Console_URL}}"
          dns: "{{rosaDict.DNS}}"
          state: "{{rosaDict.State | regex_replace('_','')}}"
      when: (inventory.wkld.rosa is defined) and (inventory.wkld.rosa | length == 0)

    - name: Get the current time
      command: date
      register: dateResponse

    - name: Record current date
      set_fact:
        end_time: '{{dateResponse.stdout_lines[0]}}'

    - name: Update last update time to inventory
      set_fact:
        inventory: "{{inventory | combine({'Last_Update':end_time}, recursive=True)}}"

    - name: Write updated inventory file
      template:
        src: ./templates/inventory.j2
        dest: ./inventory.yaml

    - debug:
        msg: [
            "Start time was {{start_time}}",
            "End time was {{end_time}}",
            "Inventory => ",
            "{{inventory}}"    
        ]

    